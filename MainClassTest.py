from __future__ import print_function

import time

from selenium.webdriver.support import expected_conditions as EC
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait

import os.path

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# If modifying these scopes, delete the file token.json.
SCOPES = ['https://www.googleapis.com/auth/gmail.readonly']

# Getting a WebDriver (3 options: chrome, firefox and mobile version of any browser)
driver = webdriver.Chrome()
# driver.implicitly_wait(5)
# driver = webdriver.Firefox()                                              #for Firefox testing
# driver.set_window_size(360, 640)                                          #for mobile version of Chrome or Firefox

# Check if we use mobile version or not
if driver.get_window_size().get("height") != 640:
    driver.maximize_window()

# Go to phiture.com website
driver.get("https://phiture.com/work-together/")

# Allow cookies
WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, '//a[@id="CybotCookiebotDialogBodyLevelButtonLevelOptinAllowAll"]')))
allowAll = driver.find_element(By.XPATH, '//a[@id="CybotCookiebotDialogBodyLevelButtonLevelOptinAllowAll"]')
allowAll.click()

# Refresh is needed because after accepting all cookies webdriver can not see main page correctly
driver.refresh()

# We found all parameters on the page
firstName = driver.find_element(By.NAME, "your-firstname")
lastName = driver.find_element(By.NAME, "your-lastname")
company = driver.find_element(By.NAME, "your-company")
email = driver.find_element(By.NAME, "your-email")
budget = driver.find_element(By.NAME, "your-budget")
website = driver.find_element(By.NAME, "your-website")

# We filled all parameters on the page
firstName.send_keys("AutogeneratedFirstName")
lastName.send_keys("AutogeneratedLastName")
company.send_keys("AutogeneratedCompany")
email.send_keys("AutogeneratedEmail@gmail.com")
budget.send_keys("1")
website.send_keys("AutogeneratedWebsite.com")

# We found all checkboxes on the page under description area
mobileGrowthStoriesNewsletterCheckbox = driver.find_element(By.XPATH, '//input[@value="Mobile Growth Stories Newsletter"]')
checkHereCheckbox = driver.find_element(By.XPATH, '//input[@name="accept-this-1"]')
asoMonthlyNewslettersCheckbox = driver.find_element(By.XPATH, '//input[@value="ASO Monthly Newsletter"]')

# scroll 250 pixels down

if driver.get_window_size().get("height") <= 640:
    driver.execute_script("window.scrollBy(0,250)")

# We found all checkboxes on the page above description area
serviceCheckboxes = driver.find_elements(By.XPATH, "//span[starts-with(@class,'wpcf7-list-item')]//input[@name='service[]']")
appStoreOptimizationCheckbox = driver.find_element(By.XPATH, '//input[@value="App Store Optimization"]')
appStoreOptimizationCheckbox.click()
appStoreOptimizationCheckbox.is_enabled()
for checkbox in serviceCheckboxes:
    checkbox.click()
    checkbox.is_enabled()

# scroll 400 pixels down
driver.execute_script("window.scrollBy(0,400)")

# We clicked all checkboxes on the page and checked if they are enabled
mobileGrowthStoriesNewsletterCheckbox.click()
mobileGrowthStoriesNewsletterCheckbox.is_enabled()
checkHereCheckbox.click()
checkHereCheckbox.is_enabled()
asoMonthlyNewslettersCheckbox.click()
asoMonthlyNewslettersCheckbox.is_enabled()

# We filled description form
descriptionArea = driver.find_element(By.XPATH, "//span[@class='wpcf7-form-control-wrap']/textarea")
descriptionArea.send_keys("Autogenerated message. Please do not reply to this email!")

# Pushing the button "Lets connect"
letsConnectButton = driver.find_element(By.XPATH, '//input[@value="Let\'s connect"]')
# letsConnectButton.click()
# if driver.find_element(By.XPATH, '//div[contains(@class, "response-output")]').is_displayed():
#     print("Failed to send your message. Please try later or contact the administrator by another method.")
#     driver.close()
#     quit()

# If modifying these scopes, delete the file token.json.
SCOPES = ['https://www.googleapis.com/auth/gmail.readonly']

# Getting messages from email using GMAIL API
def main():
    """Shows basic usage of the Gmail API.
    Lists the user's Gmail labels.
    """
    creds = None
    # The file token.json stores the user's access and refresh tokens, and is
    # created automatically when the authorization flow completes for the first
    # time.
    if os.path.exists('token.json'):
        creds = Credentials.from_authorized_user_file('token.json', SCOPES)
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                'credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open('token.json', 'w') as token:
            token.write(creds.to_json())

    try:
        # Call the Gmail API
        service = build('gmail', 'v1', credentials=creds)

        # Waiting some time
        time.sleep(10)

        # Checking for results
        results = service.users().messages()\
            .list(userId='me', labelIds=['INBOX'],
                  q="to:info@phiture.com from:access@phiture.com subject:form").execute()
        messages = results.get('messages', [])

        if not messages:
            print("You do not have new messages")

        size = len(messages)
        print()
        if size == 1:
            print("You have 1 message:")
        else:
            print(f"You have {size} messages:")

        print()
        print(*messages, sep="\n")

    except HttpError as error:
        print(f'An error occurred: {error}')


if __name__ == '__main__':
    main()

# We need to close browser
driver.close()